openapi: 3.1.0
info:
  title: Catalog Maintenance
  description: This service allows to maintain catalog entries based on purchased books.
  contact:
    name: Annegret Junker
    email: annegret.junker@codecentric.de
  version: 1.0.0
servers:
  - url: 'https://apis.online-library.org/catalog-maintenance'
tags:
  - name: Catalog Entry Creation
    description: Creation of a catalog Entry
  - name: Catalog Search
    description: Search for a catalog entry
security:
  - openIdConnect:
    - liberian_write
    - liberian_read
paths:
  /catalog-entries:
    post:
      description: Creates a new catalog entry, usually used to create catalog entries manually
      operationId: createNewCatalogEntry
      tags:
        - Catalog Entry Creation
      security:
        - openIdConnect:
          - liberian_write
      requestBody:
        $ref: "#/components/requestBodies/NewCatalogEntryRequest"
      responses:
        200:
          $ref: "#/components/responses/LinkToCatalogEntryResponse"
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'

    get:
      description: |
        Searches for catalog entries based on given parameters, title, author etc.
        are just given as strings. Publication date can be filtered by start and end.
        When the search results are too large only the first 100 are given back.
      operationId: getCatalogEntriesBySearchByDate
      tags:
        - Catalog Search
      security:
        - openIdConnect:
            - liberian_read
      parameters:
        - $ref: '#/components/parameters/SearchCriteriasParameter'
        - $ref: '#/components/parameters/PublicationDateStartParameter'
        - $ref: '#/components/parameters/PublicationDateEndParameter'
      responses:
        200:
          $ref: "#/components/responses/CatalogEntriesResponse"
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'

  /catalog-entries/{catalogEntryIdentifier}:
    get:
      description: Delivers back a catalog entry based on its identifier
      operationId: getCatalogEntryById
      tags:
        - Catalog Search
      security:
        - openIdConnect:
            - liberian_read
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdentifierParameter'
      responses:
        200:
          $ref: '#/components/responses/SingleCatalogEntryResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'

    put:
      description: Changes a catalog entry based on its identifier
      operationId: updateCatalogEntryById
      tags:
        - Catalog Update
      security:
        - openIdConnect:
            - catalog_update
      parameters:
        - $ref: '#/components/parameters/CatalogEntryIdentifierParameter'
      requestBody:
        $ref: '#/components/requestBodies/NewCatalogEntryRequest'
      responses:
        200:
          $ref: '#/components/responses/LinkToCatalogEntryResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'

components:
  parameters:
    CatalogEntryIdentifierParameter:
      name: catalogEntryIdentifier
      description: Unique catalog entry identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: d448b5bc-a9bc-4036-8899-c77f781a76d5

    PublicationDateEndParameter:
      name: publicationDateEnd
      description: End of searching period in regard of publication date
      in: query
      required: false
      schema:
        type: string
        format: date
        example: 2004-12-31

    PublicationDateStartParameter:
      name: publicationDateStart
      description: Start date for searching the according book, if not given, the search starts at 1801-01-01
      in: query
      required: false
      schema:
        type: string
        format: date
        default: 1801-01-01
        example: 2000-01-01

    SearchCriteriasParameter:
      name: searchCriterias[]
      description: A single search criteria e.g. an author surname or part of a title
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          minLength: 2
          maxLength: 200
          example: "Evans"

  requestBodies:
    CatalogEntryChange:
      description: Changes a catalog entry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntry'

    NewCatalogEntryRequest:
      description: Request to create a new catalog entry in the catalog
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogEntryToBeCreated"

  responses:
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'


    CatalogEntriesResponse:
      description: Successful operation - entries found
      content:
        application/json:
          schema:
            type: array
            minItems: 1
            maxItems: 100
            items:
              $ref: "#/components/schemas/CatalogEntry"

    ForbiddenResponse:
      description: Forbidden

    LinkToCatalogEntryResponse:
      description: Successful operation - Catalog entry created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Link"

    SingleCatalogEntryResponse:
      description: Successful operation - entry found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogEntry'

    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'

  schemas:
    CatalogEntry:
      description: Single catalog entry
      type: object
      allOf:
        - $ref: "#/components/schemas/CatalogEntryToBeCreated"
      required:
        - catalogEntryIdentifier
      properties:
        catalogEntryIdentifier:
          description: Unique identifier of a catalog entry
          type: string
          format: uuid
          example: d448b5bc-a9bc-4036-8899-c77f781a76d5

    CatalogEntryToBeCreated:
      description: An entry in the catalog which describes a certain book
      type: object
      required:
        - title
        - authors
        - editor
        - publicationDate
      properties:
        title:
          description: Title of the book
          type: string
          minLength: 2
          maxLength: 254
          example: "Domain-Driven Design"
        subTitle:
          description:
            Subtitle of the book
          type: string
          minLength: 2
          maxLength: 254
          example: "Tackling Complexity in the Heart of Software"
        authors:
          description: Authors of the book
          type: array
          minItems: 1
          maxItems: 10
          items:
            type: string
            minLength: 2
            maxLength: 63
            example:
              - "Eric Evans"
        editor:
          description: Name of the editor
          type: string
          minLength: 2
          maxLength: 63
          example: "Pearson International"
        publicationDate:
          description: |
            Date of publication
          type: string
          format: date
          example: "2003-09-04"
        blurb:
          description: Blurb of the book
          type: string
          minLength: 10
          maxLength: 2054
          example: |
            "The software development community widely acknowledges that domain modeling is central to software design."

    Link:
      description: Link to an entity
      type: object
      required:
        - type
        - link
      properties:
        type:
          description: Not fully qualified type name of the object
          type: string
          minLength: 2
          maxLength: 155
          example: "CatalogEntry"
        link:
          description: URL to the according entity
          type: string
          format: uri
          example:
            "https://apis.online-library.org/catalog-maintenance/catalog-entries/74d870fa-9e93-4ffd-907e-038c85e8bc20"

    Message:
      description: Message to a request containing detailed information
      type: object
      required:
        - messageIdentifier
        - title
        - severity
      properties:
        messageIdentifier:
          description: Identifier to the message in case of errors means the error code
          type: string
          pattern: ^[A-Z]{3}[0-9]{7}
        title:
          description: Title of the message
          type: string
          minLength: 2
          maxLength: 50
          example: Request is not allowed
        description:
          description: Description to the message
          type: string
          minLength: 2
          maxLength: 1024
          example: A search request with less than 2 characters is not allowed
        severity:
          description: Severity of the message
          type: string
          enum:
            - FATAL
            - ERROR
            - INFO
            - DEBUG
          example: INFO

  securitySchemes:
    openIdConnect:
      type: openIdConnect
      description: Security scheme for events
      openIdConnectUrl: "https://idp.online-library.org/configuration"
