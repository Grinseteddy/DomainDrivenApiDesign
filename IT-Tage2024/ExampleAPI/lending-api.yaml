openapi: 3.1.0
info:
  title: Lending Service API
  description: |
    API for managing reading lists and book lending operations.
    
    This service is part of the library domain and interacts with:
    - Catalog Management for book searches
    - Reading context for reading progress
    - Rating context for book reviews
  contact:
    email: annegret.junker@codecentric.de
    name: Annegret Junker
    url: https://api.codecentric.de
  version: 1.0.0
  x-api-id: 7c1e3bd2-f8c6-4e21-aa41-826f8eaf4092
  x-audience: external-public

servers:
  - url: 'https://api.codecentric.de/lending'

security:
  - openIdConnect:
      - lending:read
      - lending:write
      - lending:admin

tags:
  - name: Reading Lists
    description: Operations for managing reading lists
  - name: Reading List Entries
    description: Operations for managing individual entries in reading lists
  - name: Tags
    description: Operations for managing tags on reading lists

paths:
  /reading-lists:
    get:
      description: Retrieve reading lists for the authenticated user
      operationId: getReadingLists
      tags:
        - Reading Lists
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/SearchCriteriasParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          description: List of reading lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadingList'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'
    
    post:
      description: Create a new reading list
      operationId: createReadingList
      tags:
        - Reading Lists
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListCreate'
      responses:
        '201':
          $ref: '#/components/responses/LinkToResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /reading-lists/{readingListId}:
    get:
      description: Retrieve a specific reading list
      operationId: getReadingList
      tags:
        - Reading Lists
      security:
        - openIdConnect:
            - lending:read
      parameters:
        - $ref: '#/components/parameters/ReadingListIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      responses:
        '200':
          description: The requested reading list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingList'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /reading-lists/{readingListId}/entries:
    post:
      description: Add a book to a reading list
      operationId: addReadingListEntry
      tags:
        - Reading List Entries
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/ReadingListIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListEntryCreate'
      responses:
        '201':
          $ref: '#/components/responses/LinkToResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

  /reading-lists/{readingListId}/entries/{entryId}:
    put:
      description: Update reading status of a book
      operationId: updateReadingStatus
      tags:
        - Reading List Entries
      security:
        - openIdConnect:
            - lending:write
      parameters:
        - $ref: '#/components/parameters/ReadingListIdParameter'
        - $ref: '#/components/parameters/EntryIdParameter'
        - $ref: '#/components/parameters/VersionParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListEntryUpdate'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/ServiceNotAvailableResponse'

components:
  parameters:
    ReadingListIdParameter:
      name: readingListId
      description: Unique identifier of a reading list
      required: true
      in: path
      schema:
        type: string
        format: uuid
        
    EntryIdParameter:
      name: entryId
      description: Unique identifier of a reading list entry
      required: true
      in: path
      schema:
        type: string
        format: uuid

  schemas:
    ReadingList:
      type: object
      description: A collection of books that a user wants to read or is reading
      required:
        - id
        - name
        - entries
        - tags
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the reading list
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the reading list
        description:
          type: string
          maxLength: 500
          description: Optional description of the reading list
        entries:
          type: array
          description: Books in the reading list
          items:
            $ref: '#/components/schemas/ReadingListEntry'
        tags:
          type: array
          description: Tags associated with the reading list
          items:
            type: string
            minLength: 1
            maxLength: 50

    ReadingListCreate:
      type: object
      description: Data required to create a new reading list
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50

    ReadingListEntry:
      type: object
      description: A book entry in a reading list with its reading status
      required:
        - id
        - bookId
        - status
        - addedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the entry
        bookId:
          type: string
          format: uuid
          description: Reference to the book in the catalog
        status:
          type: string
          enum:
            - TO_BE_READ
            - READING
            - FINISHED
          description: Current reading status of the book
        addedAt:
          type: string
          format: date-time
          description: When the book was added to the list
        startedAt:
          type: string
          format: date-time
          description: When the user started reading the book
        finishedAt:
          type: string
          format: date-time
          description: When the user finished reading the book

    ReadingListEntryCreate:
      type: object
      description: Data required to add a book to a reading list
      required:
        - bookId
      properties:
        bookId:
          type: string
          format: uuid
          description: Reference to the book in the catalog
        status:
          type: string
          enum:
            - TO_BE_READ
            - READING
          default: TO_BE_READ
          description: Initial reading status of the book

    ReadingListEntryUpdate:
      type: object
      description: Data for updating a reading list entry
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - TO_BE_READ
            - READING
            - FINISHED
          description: New reading status for the book

  securitySchemes:
    openIdConnect:
      type: openIdConnect
      description: OpenID Connect authentication
      openIdConnectUrl: "https://idp.codecentric.de/configuration"
